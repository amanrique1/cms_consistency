from gzip import GzipFile

class PathListRead1(object):
    
    def __init__(self, f):
        self.F = f
        self.LastPath = []
        
    def read(self):
        done = False
        while not done:
            line = self.F.readline()
            if not line:    return None     # EOF
            line = line.strip()
            if line:
                words = line.split(":",1)
                n = int(words[0])
                tail = words[1]
                parts = tail.split("/")
                path_parts = self.LastPath[:n] + parts
                self.LastPath = path_parts
                return "/".join(path_parts)
    
    def paths(self):
        done = False
        while not done:
            path = self.read()
            if not path:    break
            yield path
            
class PathListRead(object):
    
    def __init__(self, f):
        self.F = f
        self.LastPath = ""
        
    def read(self):
        done = False
        while not done:
            line = self.F.readline()
            if not line:    return None     # EOF
            line = line.strip()
            if line:
                words = line.split(":",1)
                n = int(words[0])
                tail = words[1]
                self.LastPath = self.LastPath[:n] + tail
                return self.LastPath
    
    def paths(self):
        done = False
        while not done:
            path = self.read()
            if not path:    break
            yield path
            
class PathListWrite1(object):

    BUFFER_SIZE = 100000
    
    def __init__(self, f):
        self.F = f
        self.LastPath = ""
        self.Buffer = []
        
    def write(self, path):
        self.Buffer.append(path)
        if len(self.Buffer) >= self.BUFFER_SIZE:
            self.flush()
    
    def flush(self):
        paths = sorted(self.Buffer)
        for path in paths:
            words = path.split("/")
            words_cmp = words[:len(self.LastPath)]
            n = 0
            for n, (w, p) in enumerate(zip(words_cmp, self.LastPath)):
                if w != p:
                    break
            self.F.write("%d:%s" % (n, "/".join(words[n:])))
            self.LastPath = words
        self.Buffer = []
    
    def close(self):
        self.flush()
        self.F.close()
        
class PathListWrite(object):

    BUFFER_SIZE = 100000
    
    def __init__(self, f):
        self.F = f
        self.LastPath = []
        self.Buffer = []
        
    def write(self, path):
        print("write: path:", repr(path))
        self.Buffer.append(path)
        if len(self.Buffer) >= self.BUFFER_SIZE:
            self.flush()
    
    def flush(self):
        paths = sorted(self.Buffer)
        for path in paths:
            min_len = min(len(path), len(self.LastPath))
            n = 0
            for n, (a, b) in enumerate(zip(path, self.LastPath)):
                if a != b:  break
            self.F.write("%d:%s" % (n, path[n:]))
            self.LastPath = path
        self.Buffer = []
    
    def close(self):
        self.flush()
        self.F.close()
        
class PathListWrite_gzip(object):

    BUFFER_SIZE = 100000
    
    def __init__(self, f):
        self.F = f
        self.G = GzipFile(f, mode="w")
        self.LastPath = []
        self.Buffer = []
        
    def write(self, path):
        self.Buffer.append(path)
        if len(self.Buffer) >= self.BUFFER_SIZE:
            self.flush()
    
    def flush(self):
        paths = sorted(self.Buffer)
        self.G.write(paths)
        self.Buffer = []
    
    def close(self):
        self.flush()
        self.F.close()
        
if __name__ == "__main__":
    import sys
    if sys.argv[1] == "compress":
        w = PathListWrite(sys.stdout)
        for line in sys.stdin.readlines():
            w.write(line)
        w.close()
    else:
        r = PathListRead(sys.stdin)
        for path in r.paths():
            sys.stdout.write(path+"\n")
    
        
            
            
